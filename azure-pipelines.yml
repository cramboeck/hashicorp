# Azure DevOps Pipeline for AVD Image Build and Infrastructure Deployment
# Securely uses Azure Key Vault for secrets

trigger:
  branches:
    include:
      - main

schedules:
- cron: "0 3 1 * *"  # jeden 1. Tag im Monat um 03:00 Uhr UTC
  displayName: 'Monthly AVD Image Build'
  branches:
    include:
      - main
  always: true

variables:
- group: packer-secrets  # Variablen aus Key Vault verknÃ¼pfter Variable Group
- name: date_tag
  value: $[format('{0:yyyy}.{0:MM}.{0:dd}', pipeline.startTime)]

stages:
- stage: BuildAVDImage
  displayName: 'Build AVD Base Image with Packer'
  jobs:
  - job: BuildImage
    displayName: 'Execute Packer Build'
    pool:
      name: 'AVD-packer'
    steps:
    - checkout: self

    - script: |
        cd 01-base-packer
        echo "{\n  \"client_id\": \"$(client-id)\",\n  \"client_secret\": \"$(client-secret)\",\n  \"tenant_id\": \"$(tenant-id)\",\n  \"subscription_id\": \"$(subscription-id)\",\n  \"winrm_password\": \"$(winrm-password)\",\n  \"sig_rg_name\": \"shared-image-gallery-rg\",\n  \"sig_image_name\": \"avd-golden\",\n  \"sig_image_version\": \"$(date_tag)\"\n}" > packer.auto.pkrvars.json
      displayName: 'Generate secure packer.auto.pkrvars.json'

    - task: PowerShell@2
      displayName: 'Validate Packer Template'
      inputs:
        targetType: 'inline'
        pwsh: true
        script: |
          cd 01-base-packer
          echo "##[group]Packer Validate"
          packer validate -var-file="packer.auto.pkrvars.json" .
          echo "##[endgroup]"

    - task: PowerShell@2
      displayName: 'Run Packer Build'
      inputs:
        targetType: 'inline'
        pwsh: true
        script: |
          cd 01-base-packer
          echo "##[group]Packer Init"
          packer init .
          echo "##[endgroup]"

          echo "##[group]Packer Build with Logging"
          packer build -color=true -on-error=abort -var-file="packer.auto.pkrvars.json" . | Tee-Object -FilePath "packer.log"
          echo "##[endgroup]"

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Packer Log Output'
      inputs:
        PathtoPublish: '01-base-packer/packer.log'
        ArtifactName: 'packer-logs'
        publishLocation: 'Container'

- stage: DeployInfrastructure
  displayName: 'Deploy AVD Infrastructure with Terraform'
  dependsOn: BuildAVDImage
  condition: succeeded()
  jobs:
  - job: TerraformApply
    displayName: 'Terraform Apply'
    pool:
      name: 'AVD-packer'
    steps:
    - checkout: self

    - script: |
        if ! command -v terraform &>/dev/null; then
          curl -sLo terraform.zip https://releases.hashicorp.com/terraform/1.7.5/terraform_1.7.5_linux_amd64.zip
          unzip -o terraform.zip
          sudo mv -f terraform /usr/local/bin/
          rm terraform.zip
        fi
        terraform -version
      displayName: 'Install Terraform CLI (with cache check)'

    - script: |
        cd 00-avd-terraform
        terraform init
        terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: $(client-id)
        ARM_CLIENT_SECRET: $(client-secret)
        ARM_SUBSCRIPTION_ID: $(subscription-id)
        ARM_TENANT_ID: $(tenant-id)
      displayName: 'Run Terraform Apply'
