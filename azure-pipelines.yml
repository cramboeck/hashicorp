# Azure DevOps Pipeline for AVD Image Build and Infrastructure Deployment
# Securely uses Azure Key Vault for secrets

trigger:
  branches:
    include:
      - main

schedules:
- cron: "0 3 1 * *"  # jeden 1. Tag im Monat um 03:00 Uhr UTC
  displayName: 'Monthly AVD Image Build'
  branches:
    include:
      - main
  always: true

variables:
- group: packer-secrets  # Variablen aus Key Vault verknüpfter Variable Group

stages:
- stage: Init
  displayName: 'Set fixed variables'
  jobs:
  - job: InitVars
    displayName: 'Set static image version'
    pool:
      name: 'AVD-packer'
    steps:
    - script: |
        echo "##vso[task.setvariable variable=date_tag]2025.05.24"
      displayName: 'Set fixed date_tag variable'

- stage: BuildAVDImage
  displayName: 'Build AVD Base Image with Packer'
  dependsOn: Init
  jobs:
  - job: BuildImage
    displayName: 'Execute Packer Build'
    pool:
      name: 'AVD-packer'
    steps:
    - checkout: self

    - script: |
        echo "Authenticating with Azure..."
        az login --service-principal \
          -u "$(client-id)" \
          -p "$(client-secret)" \
          --tenant "$(tenant-id)" > /dev/null
        az account show
      displayName: 'Azure CLI Login'

    - task: PowerShell@2
      displayName: 'Generate secure packer.auto.pkrvars.json (pwsh)'
      inputs:
          targetType: 'inline'
          pwsh: true
          script: |
                # Hash table für Variablen aus dem Azure Key Vault
                $packerVars = @{
                    client_id       = "$(client-id)"
                    client_secret   = "$(client-secret)"
                    tenant_id       = "$(tenant-id)"
                    subscription_id = "$(subscription-id)"
                    location        = "$(location)"
                    sig_rg_name     = "$(sig_rg_name)"
                    sig_name        = "$(sig_name)"
                  }

                  # Konvertiere HashTable zu JSON
                  $json = $packerVars | ConvertTo-Json -Depth 3

                  # Zielpfad für die Datei
                  $jsonPath = "$(Build.SourcesDirectory)/packer.auto.pkrvars.json"

                  # Ausgabe
                  Write-Host "Writing packer.auto.pkrvars.json to $jsonPath"
                  $json | Out-File -FilePath $jsonPath -Encoding UTF8


    - script: |
        echo "##[group]System Diagnostics"
        df -h
        free -m
        az account show
        echo "Content of generated packer.auto.pkrvars.json:"
        cat 01-base-packer/packer.auto.pkrvars.json
        echo "Image versions available in SIG:"
        az sig image-version list \
          --gallery-name avd_sig \
          --gallery-image-definition avd-goldenimage \
          --resource-group ramboeck-test-westeurope-rg \
          --query "[].name" -o table
        echo "##[endgroup]"
      displayName: 'System & File Diagnostics'

    - task: PowerShell@2
      displayName: 'Validate Packer Template'
      inputs:
        targetType: 'inline'
        pwsh: true
        script: |
                    echo "##[group]Packer Validate"
                    packer validate -var-file="packer.auto.pkrvars.json" .
                    echo "##[endgroup]"

    - task: PowerShell@2
      displayName: 'Run Packer Build'
      inputs:
          targetType: 'inline'
          pwsh: true
          script: |
                  echo "##[group]Packer Init"
                  packer init .
                  echo "##[endgroup]"

                  echo "##[group]Packer Build with Logging"
                  packer build -color=true -on-error=abort -var-file="packer.auto.pkrvars.json" . | Tee-Object -FilePath "packer.log"
                  echo "##[endgroup]"

    - script: |
        cd 01-base-packer
        Remove-Item -Path "01-base-packer/packer.auto.pkrvars.json" -Force -ErrorAction SilentlyContinue
        displayName: 'Cleanup packer.auto.pkrvars.json'

    - script: |
        echo "Logging out of Azure session"
        az logout || true
      displayName: 'Azure Logout (post-build)'

    - task: PublishBuildArtifacts@1
      condition: ne(variables['skip_build'], 'true')
      displayName: 'Publish Packer Log Output'
      inputs:
        PathtoPublish: '01-base-packer/packer.log'
        ArtifactName: 'packer-logs'
        publishLocation: 'Container'
