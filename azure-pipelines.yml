# Azure DevOps Pipeline for AVD Image Build and Infrastructure Deployment
# Securely uses Azure Key Vault for secrets

trigger:
  branches:
    include:
      - main

schedules:
- cron: "0 3 1 * *"  # jeden 1. Tag im Monat um 03:00 Uhr UTC
  displayName: 'Monthly AVD Image Build'
  branches:
    include:
      - main
  always: true

variables:
- group: packer-secrets  # Variablen aus Key Vault verkn√ºpfter Variable Group

stages:
- stage: Init
  displayName: 'Set fixed variables'
  jobs:
  - job: InitVars
    displayName: 'Set static image version'
    pool:
      name: 'AVD-packer'
    steps:
    - script: |
        echo "##vso[task.setvariable variable=date_tag]2025.05.24"
      displayName: 'Set fixed date_tag variable'

- stage: BuildAVDImage
  displayName: 'Build AVD Base Image with Packer'
  dependsOn: Init
  jobs:
  - job: BuildImage
    displayName: 'Execute Packer Build'
    pool:
      name: 'AVD-packer'
    steps:
    - checkout: self

    - script: |
        cd 01-base-packer
        az config set extension.use_dynamic_install=yes_without_prompt
        IMAGE_EXISTS=$(az sig image-version list \
          --gallery-name avd_sig \
          --gallery-image-definition avd-goldenimage \
          --resource-group ramboeck-test-westeurope-rg \
          --query "[?name=='2025.05.22'] | length(@)" -o tsv)

        if [ "$IMAGE_EXISTS" != "0" ]; then
          echo "Image version 2025.05.22 already exists. Skipping build."
          echo "##vso[task.setvariable variable=skip_build]true"
          exit 0
        else
          echo "##vso[task.setvariable variable=skip_build]false"
        fi
      displayName: 'Check if image version already exists'

    - task: PowerShell@2
      displayName: 'Generate secure packer.auto.pkrvars.json (pwsh)'
      inputs:
        targetType: 'inline'
        pwsh: true
        script: |
          $json = @{
            client_id       = '$(client-id)'
            client_secret   = '$(client-secret)'
            tenant_id       = '$(tenant-id)'
            subscription_id = '$(subscription-id)'
            winrm_password  = '$(winrm-password)'
            sig_rg_name     = 'ramboeck-test-westeurope-rg'
            sig_image_name  = 'avd-goldenimage'
            sig_name        = 'avd_sig'
            sig_image_version = '2025.05.24'
          } | ConvertTo-Json -Depth 2

          Set-Content -Path "01-base-packer/packer.auto.pkrvars.json" -Value $json

    - script: |
        echo "##[group]System Diagnostics"
        df -h
        free -m
        az account show
        echo "Content of generated packer.auto.pkrvars.json:"
        cat 01-base-packer/packer.auto.pkrvars.json
        echo "##[endgroup]"
      condition: ne(variables['skip_build'], 'true')
      displayName: 'System & File Diagnostics'

    - task: PowerShell@2
      condition: ne(variables['skip_build'], 'true')
      displayName: 'Validate Packer Template'
      inputs:
        targetType: 'inline'
        pwsh: true
        script: |
          cd 01-base-packer
          echo "##[group]Packer Validate"
          packer validate -var-file="packer.auto.pkrvars.json" .
          echo "##[endgroup]"

    - task: PowerShell@2
      condition: ne(variables['skip_build'], 'true')
      displayName: 'Run Packer Build'
      inputs:
        targetType: 'inline'
        pwsh: true
        script: |
          cd 01-base-packer
          echo "##[group]Packer Init"
          packer init .
          echo "##[endgroup]"

          echo "##[group]Packer Build with Logging"
          packer build -color=true -on-error=abort -var-file="packer.auto.pkrvars.json" . | Tee-Object -FilePath "packer.log"
          echo "##[endgroup]"

    - script: |
        cd 01-base-packer
        rm -f packer.auto.pkrvars.json
      displayName: 'Cleanup packer.auto.pkrvars.json'

    - task: PublishBuildArtifacts@1
      condition: ne(variables['skip_build'], 'true')
      displayName: 'Publish Packer Log Output'
      inputs:
        PathtoPublish: '01-base-packer/packer.log'
        ArtifactName: 'packer-logs'
        publishLocation: 'Container'
